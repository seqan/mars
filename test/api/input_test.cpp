// ------------------------------------------------------------------------------------------------------------
// This is MaRs, Motif-based aligned RNA searcher.
// Copyright (c) 2020-2022 Jörg Winkler & Knut Reinert @ Freie Universität Berlin & MPI für molekulare Genetik.
// This file may be used, modified and/or redistributed under the terms of the 3-clause BSD-License
// shipped with this file and also available at https://github.com/seqan/mars.
// ------------------------------------------------------------------------------------------------------------

#include <gtest/gtest.h>

#include <seqan3/std/filesystem>
#include <seqan3/std/ranges>
#include <string_view>

#include <seqan3/alphabet/gap/gapped.hpp>
#include <seqan3/alphabet/nucleotide/rna15.hpp>
#include <seqan3/alphabet/views/char_to.hpp>
#include <seqan3/core/debug_stream.hpp> // must remain here because of a bug
#include <seqan3/io/exception.hpp>
#include <seqan3/test/expect_range_eq.hpp>

#include "format_clustal.hpp"
#include "multiple_alignment.hpp"

// Generate the full path of a test input file that is provided in the data directory.
std::filesystem::path data(std::string const & filename)
{
    return std::filesystem::path{std::string{DATADIR}}.concat(filename);
}

TEST(ClustalInput, ReadFile)
{
    std::vector<std::string> names
    {
        {"M83762.1-1031_1093"},
        {"AC008670.6-83725_83795"},
        {"Z82044.1-16031_16103"},
        {"AE004843.1-4972_4900"},
        {"AB042432.1-14140_14072"}
    };

    std::vector<std::vector<seqan3::gapped<seqan3::rna15>>> alignment{5};
    using std::ranges::copy;
    copy(std::string_view{"gcuuuaaaagc-uuu---gcugaagcaacggcc----uuguaagucguagaa-aacu--a-ua---cguuuuaaagcu"}
        | seqan3::views::char_to<seqan3::gapped<seqan3::rna15>>, std::cpp20::back_inserter(alignment[0]));
    copy(std::string_view{"acuuuuaaagg-aua-acagccauccguugguc----uuaggccccaaaaau-uuuggugcaacuccaaauaaaagua"}
        | seqan3::views::char_to<seqan3::gapped<seqan3::rna15>>, std::cpp20::back_inserter(alignment[1]));
    copy(std::string_view{"gcgguuguggcgaag-ugguuaacgcaccagauuguggcucuggcacuc----guggguucgauucccaucaaucgcc"}
        | seqan3::views::char_to<seqan3::gapped<seqan3::rna15>>, std::cpp20::back_inserter(alignment[2]));
    copy(std::string_view{"gcucauguagc-ucaguugguagagcacacccu----ugguaagggugaggucagcgguucaaauccgcucaugagcu"}
        | seqan3::views::char_to<seqan3::gapped<seqan3::rna15>>, std::cpp20::back_inserter(alignment[3]));
    copy(std::string_view{"guuucuguagu-ugaau---uacaacgaugauu----uuucaugucauuggu-cgcaguugaaugcuguguagaaaua"}
        | seqan3::views::char_to<seqan3::gapped<seqan3::rna15>>, std::cpp20::back_inserter(alignment[4]));

    mars::Msa msa = mars::read_clustal_file<seqan3::rna15>(data("tRNA.aln"));

    EXPECT_RANGE_EQ(msa.sequences, alignment);
    EXPECT_RANGE_EQ(msa.names, names);
}

TEST(ClustalInput, FailFileNotFound)
{
    EXPECT_THROW(mars::read_msa(std::filesystem::path{"not_exist.aln"}),
                 seqan3::file_open_error);
}

TEST(ClustalInput, FailClustalHeader)
{
    std::stringstream str{"CLUSTER FORMAT\n\n"};
    EXPECT_THROW(mars::read_clustal_file<seqan3::rna15>(str), seqan3::parse_error);
}

TEST(ClustalInput, FailWrongSequenceId)
{
    std::stringstream str{"CLUSTAL FORMAT\n"
                          "\n"
                          "M83762.1-1031_1093      gcuuuaaaagc-uuu---gcugaagcaacggcc----uuguaagucguag\n"
                          "AC008670.6-83725_83795  acuuuuaaagg-aua-acagccauccguugguc----uuaggccccaaaa\n"
                          "                                 *               *                        \n"
                          "\n"
                          "M83762.1-1031_1093      aa-aacu--a-ua---cguuuuaaagcu\n"
                          "wrong-sequence-id       au-uuuggugcaacuccaaauaaaagua\n"
                          "                                    *               \n"
                          "\n"};
    EXPECT_THROW(mars::read_clustal_file<seqan3::rna15>(str), seqan3::parse_error);
}

TEST(ClustalInput, FailInvalidCharacter)
{
    std::stringstream str{"CLUSTAL FORMAT\n"
                          "\n"
                          "M83762.1-1031_1093      gcuzuaaaagc-uuu---gcugaagcaacggcc----uuguaagucguag\n"
                          "AC008670.6-83725_83795  acuuuuaaagg-aua-acagccauccguugguc----uuaggccccaaaa\n"
                          "                                 *               *                        \n"
                          "\n"};
    EXPECT_THROW(mars::read_clustal_file<seqan3::rna15>(str), seqan3::parse_error);
}

TEST(StockholmInput, ReadFile)
{
    mars::Msa msa = mars::read_msa(data("SSU_rRNA_5.sth"));

    EXPECT_EQ(msa.names.size(), msa.sequences.size());
    EXPECT_EQ(msa.sequences[0].size(), msa.structure.first.size());
    EXPECT_EQ(msa.structure.first.size(), msa.structure.second.size());
    EXPECT_EQ(msa.sequences.size(), 259ul);
    EXPECT_EQ(msa.sequences[0].size(), 1139ul);
    EXPECT_EQ(msa.names[0], "AF132134.1/1-639");
    std::vector<int> basepairs{
        -1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,926,925,924,923,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,867,-1,
        -1,866,-1,865,-1,864,863,862,-1,-1,117,116,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
        -1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
        -1,-1,-1,-1,-1,-1,-1,-1,-1,-1,46,45,-1,-1,-1,-1,-1,-1,819,818,817,-1,-1,-1,-1,-1,-1,-1,-1,-1,725,724,723,-1,
        721,720,-1,-1,-1,-1,718,717,-1,-1,-1,-1,-1,707,705,704,703,702,701,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
        -1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
        -1,-1,-1,-1,-1,-1,-1,-1,254,-1,253,-1,-1,-1,-1,-1,-1,-1,-1,246,245,-1,-1,-1,242,241,-1,-1,-1,-1,-1,-1,234,233,
        -1,-1,229,228,-1,-1,-1,-1,-1,-1,219,217,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,310,309,308,307,
        306,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,277,276,275,274,273,
        -1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
        -1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
        -1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
        -1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
        -1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
        -1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
        -1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
        -1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
        -1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
        -1,-1,695,694,693,692,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
        -1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,649,648,647,646,-1,-1,-1,-1,-1,158,157,156,155,154,-1,153,-1,-1,-1,-1,
        -1,-1,-1,-1,-1,147,146,-1,141,140,-1,138,137,136,-1,-1,785,784,783,-1,-1,781,-1,-1,-1,775,773,772,-1,-1,-1,-1,
        -1,-1,771,770,769,768,767,-1,766,764,763,-1,760,-1,-1,-1,756,-1,-1,754,753,-1,752,750,749,748,747,746,739,738,
        -1,737,-1,-1,-1,-1,-1,733,-1,730,729,728,-1,-1,-1,816,815,814,812,-1,807,-1,806,805,804,-1,-1,-1,-1,-1,798,797,
        796,794,-1,-1,-1,-1,792,-1,791,790,789,126,125,124,-1,-1,844,843,-1,841,840,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
        -1,-1,826,825,-1,823,822,-1,-1,-1,855,854,-1,-1,-1,-1,849,848,-1,-1,-1,-1,-1,-1,42,41,40,38,36,33,-1,-1,-1,-1,
        -1,-1,-1,-1,-1,-1,-1,-1,-1,916,-1,915,914,913,-1,-1,-1,-1,911,910,909,908,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
        -1,-1,893,892,891,890,-1,885,884,883,881,-1,-1,-1,-1,-1,-1,18,17,16,15,-1,-1,-1,-1,-1,-1,-1,980,979,978,-1,-1,
        -1,-1,-1,-1,-1,-1,968,967,966,965,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,948,947,946,945,-1,-1,-1,-1,
        -1,-1,-1,-1,-1,936,935,934,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
        -1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
        -1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,1125,1124,1122,1121,1120,-1,
        -1,-1,-1,-1,-1,-1,-1,-1,-1,-1,1117,1116,1115,1114,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
        -1,-1,1091,1090,1089,1088,-1,-1,1076,1075,1074,-1,1073,1072,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1
    };
    std::vector<int> pklevels{
        -1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,0,0,0,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,0,-1,-1,0,-1,0,
        -1,0,0,0,-1,-1,0,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
        -1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
        -1,-1,0,0,-1,-1,-1,-1,-1,-1,0,0,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,0,0,0,-1,0,0,-1,-1,-1,-1,0,0,-1,-1,-1,-1,-1,0,0,0,
        0,0,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
        -1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,0,-1,0,-1,-1,-1,-1,-1,-1,-1,-1,0,0,-1,-1,
        -1,0,0,-1,-1,-1,-1,-1,-1,0,0,-1,-1,0,0,-1,-1,-1,-1,-1,-1,0,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
        -1,-1,0,0,0,0,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,0,0,0,0,0,
        -1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
        -1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
        -1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
        -1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
        -1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
        -1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
        -1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
        -1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
        -1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
        -1,-1,0,0,0,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
        -1,-1,-1,-1,-1,-1,-1,-1,-1,-1,0,0,0,0,-1,-1,-1,-1,-1,0,0,0,0,0,-1,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,0,0,-1,0,0,-1,0,
        0,0,-1,-1,0,0,0,-1,-1,0,-1,-1,-1,0,0,0,-1,-1,-1,-1,-1,-1,0,0,0,0,0,-1,0,0,0,-1,0,-1,-1,-1,0,-1,-1,0,0,-1,0,0,0,
        0,0,0,0,0,-1,0,-1,-1,-1,-1,-1,0,-1,0,0,0,-1,-1,-1,0,0,0,0,-1,0,-1,0,0,0,-1,-1,-1,-1,-1,0,0,0,0,-1,-1,-1,-1,0,
        -1,0,0,0,0,0,0,-1,-1,0,0,-1,0,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,0,0,-1,0,0,-1,-1,-1,0,0,-1,-1,-1,-1,0,0,
        -1,-1,-1,-1,-1,-1,0,0,0,0,0,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,0,-1,0,0,0,-1,-1,-1,-1,0,0,0,0,-1,-1,-1,
        -1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,0,0,0,0,-1,0,0,0,0,-1,-1,-1,-1,-1,-1,0,0,0,0,-1,-1,-1,-1,-1,-1,-1,0,0,0,-1,-1,
        -1,-1,-1,-1,-1,-1,0,0,0,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,0,0,0,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,0,
        0,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
        -1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,
        -1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,0,0,0,0,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,0,0,0,0,-1,
        -1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,0,0,0,0,-1,-1,0,0,0,-1,0,0,-1,-1,-1,-1,-1,-1,-1,
        -1,-1,-1,-1,-1,-1
    };
    EXPECT_RANGE_EQ(msa.structure.first, basepairs);
    EXPECT_RANGE_EQ(msa.structure.second, pklevels);
}
