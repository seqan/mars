name: Mars CI

on:
  push:
    branches:
      # Push events to branches matching refs/heads/master
      - 'master'
  pull_request:

env:
  CMAKE_VERSION: 3.13.5
  DOXYGEN_VERSION: 1.9.1
  VIENNA_VERSION: 2.4.17
  SEQAN3_NO_VERSION_CHECK: 1
  TZ: Europe/Berlin
  GCCWARN: "-Wall -Wextra -pedantic -Werror"

defaults:
  run:
    shell: bash -ex {0}

jobs:
  build:
    name: ${{ matrix.name }}
    runs-on: ${{ matrix.os }}
    timeout-minutes: 120
    strategy:
      fail-fast: false
      matrix:
        include:
          - name: "gcc9 (c++2a) on Linux"
            os: ubuntu-20.04
            requires_toolchain: true
            requires_ccache: true
            cxx: "g++-9"
            cc: "gcc-9"
            build: unit
            build_type: Release
            cxx_flags: "-std=c++2a"

          - name: "gcc9 (c++2a) on macOS"
            os: macos-10.15
            requires_toolchain: true
            requires_ccache: true
            cxx: "g++-9"
            cc: "gcc-9"
            build: unit
            build_type: Release
            cxx_flags: "-std=c++2a"

          - name: "gcc10 (c++17) on Linux"
            os: ubuntu-20.04
            requires_toolchain: true
            requires_ccache: true
            cxx: "g++-10"
            cc: "gcc-10"
            build: unit
            build_type: Release
            cxx_flags: "-std=c++17 -fconcepts"

          - name: "gcc10 (c++17) on macOS"
            os: macos-10.15
            requires_toolchain: true
            requires_ccache: true
            cxx: "g++-10"
            cc: "gcc-10"
            build: unit
            build_type: Release
            cxx_flags: "-std=c++17 -fconcepts"

          - name: "gcc10 (c++20) on Linux"
            os: ubuntu-20.04
            requires_toolchain: true
            requires_ccache: true
            cxx: "g++-10"
            cc: "gcc-10"
            build: unit
            build_type: Release
            cxx_flags: "-std=c++20"

          - name: "gcc10 (c++20) on macOS"
            os: macos-10.15
            requires_toolchain: true
            requires_ccache: true
            cxx: "g++-10"
            cc: "gcc-10"
            build: unit
            build_type: Release
            cxx_flags: "-std=c++20"

          - name: "gcc8 on Linux"
            os: ubuntu-20.04
            requires_toolchain: true
            requires_ccache: true
            cxx: "g++-8"
            cc: "gcc-8"
            build: unit
            build_type: Release

          - name: "gcc8 on macOS"
            os: macos-10.15
            requires_toolchain: true
            requires_ccache: true
            cxx: "g++-8"
            cc: "gcc-8"
            build: unit
            build_type: Release

          - name: "gcc7 on Linux"
            os: ubuntu-20.04
            requires_toolchain: true
            requires_ccache: true
            cxx: "g++-7"
            cc: "gcc-7"
            build: unit
            build_type: Release

          - name: "gcc7 on macOS"
            os: macos-10.15
            requires_toolchain: true
            requires_ccache: true
            cxx: "g++-7"
            cc: "gcc-7"
            build: unit
            build_type: Release

          - name: "Documentation"
            os: ubuntu-20.04
            requires_toolchain: false
            requires_ccache: false
            build: documentation

    steps:
      - name: Checkout
        uses: actions/checkout@v2
        with:
          path: app
          submodules: recursive

      - name: Get cached CMake
        uses: actions/cache@v2
        with:
          path: /tmp/cmake-download
          key: ${{ runner.os }}-CMake_${{ env.CMAKE_VERSION }}

      - name: Setup CMake
        run: |
          if [ "$RUNNER_OS" == "Linux" ]; then
            OS="Linux"
          else
            OS="Darwin"
          fi
          mkdir -p /tmp/cmake-download
          wget --retry-connrefused --waitretry=30 --read-timeout=30 --timeout=30 --tries=20 --no-clobber --quiet --directory-prefix=/tmp/cmake-download/ https://github.com/Kitware/CMake/releases/download/v${CMAKE_VERSION}/cmake-${CMAKE_VERSION}-${OS}-x86_64.tar.gz
          tar -C /tmp/ -zxf /tmp/cmake-download/cmake-${CMAKE_VERSION}-${OS}-x86_64.tar.gz
          echo "/tmp/cmake-${CMAKE_VERSION}-${OS}-x86_64/bin" >> $GITHUB_PATH # Only available in subsequent steps!

      - name: Get cached Doxygen
        if: matrix.build == 'documentation'
        uses: actions/cache@v2
        with:
          path: /tmp/doxygen-download
          key: ${{ runner.os }}-Doxygen_${{ env.DOXYGEN_VERSION }}

      - name: Setup Doxygen
        if: matrix.build == 'documentation'
        run: |
          sudo apt-get update
          sudo apt-get install texlive-font-utils ghostscript texlive-latex-extra graphviz libclang-9-dev libclang-cpp9 # graphviz for dot, latex to parse formulas, libclang for doxygen
          mkdir -p /tmp/doxygen-download
          wget --retry-connrefused --waitretry=30 --read-timeout=30 --timeout=30 --tries=20 --no-clobber --quiet --directory-prefix=/tmp/doxygen-download/ https://sourceforge.net/projects/doxygen/files/rel-${DOXYGEN_VERSION}/doxygen-${DOXYGEN_VERSION}.linux.bin.tar.gz
          tar -C /tmp/ -zxf /tmp/doxygen-download/doxygen-${DOXYGEN_VERSION}.linux.bin.tar.gz
          echo "/tmp/doxygen-${DOXYGEN_VERSION}/bin" >> $GITHUB_PATH # Only available in subsequent steps!

      - name: Get cached ViennaRNA
        if: matrix.requires_toolchain
        uses: actions/cache@v2
        with:
          path: /tmp/vienna-download
          key: ${{ runner.os }}-ViennaRNA_${{ env.VIENNA_VERSION }}

      - name: Setup ViennaRNA
        if: matrix.requires_toolchain
        run: |
          mkdir -p /tmp/vienna-download
          if [ "$RUNNER_OS" == "Linux" ]; then
            wget --retry-connrefused --waitretry=30 --read-timeout=30 --timeout=30 --tries=20 --no-clobber --quiet --directory-prefix=/tmp/vienna-download/ https://www.tbi.univie.ac.at/RNA/download/ubuntu/ubuntu_20_04/viennarna-dev_${VIENNA_VERSION}-1_amd64.deb
            sudo apt install -f -y /tmp/vienna-download/viennarna-dev_${VIENNA_VERSION}-1_amd64.deb
          else
            wget --retry-connrefused --waitretry=30 --read-timeout=30 --timeout=30 --tries=20 --no-clobber --quiet --directory-prefix=/tmp/vienna-download/ https://www.tbi.univie.ac.at/RNA/download/osx/macosx/ViennaRNA-${VIENNA_VERSION}-MacOSX.dmg
            hdiutil mount /tmp/vienna-download/ViennaRNA-${VIENNA_VERSION}-MacOSX.dmg
            sudo installer -package /Volumes/ViennaRNA\ 2.4.17/ViennaRNA\ Package\ 2.4.17\ Installer.pkg -target "/Volumes/Macintosh HD"
            hdiutil unmount /Volumes/ViennaRNA\ ${VIENNA_VERSION}
          fi

      - name: Add package source
        if: matrix.requires_toolchain && runner.os == 'Linux'
        shell: bash
        run: sudo add-apt-repository --yes ppa:ubuntu-toolchain-r/ppa && sudo apt-get update

      - name: Install ccache
        if: matrix.requires_ccache
        run: |
          if [ "$RUNNER_OS" == "Linux" ]; then
            sudo apt-get install --yes ccache
          else
            brew install --force-bottle ccache
          fi

      - name: Install boost
        if: matrix.requires_toolchain
        run: |
          if [ "$RUNNER_OS" == "Linux" ]; then
            sudo apt-get install --yes libboost-all-dev
          else
            brew install --force-bottle boost
          fi

      - name: Install compiler ${{ matrix.cxx }}
        if: matrix.requires_toolchain
        run: |
          if [ "$RUNNER_OS" == "Linux" ]; then
            sudo apt-get install --yes ${{ matrix.cxx }}
          else
            cxx_macos_name=$(echo "${{ matrix.cxx }}" | sed "s/++-/cc@/g")
            brew install --force-bottle $cxx_macos_name
            brew link $cxx_macos_name
          fi

      - name: Install lcov
        if: matrix.build == 'coverage'
        run: |
          sudo apt-get install --yes lcov
          sudo update-alternatives --install /usr/bin/gcov gcov /usr/bin/gcov-7 100

      - name: Get cached build
        if: matrix.requires_ccache
        uses: actions/cache@v2
        with:
          path: .ccache
          key: ${{ matrix.name }}-ccache-${{ github.ref }}-${{ github.run_number }}
          # Restoring: From current branch, otherwise from base branch, otherwise from any branch.
          restore-keys: |
            ${{ matrix.name }}-ccache-${{ github.ref }}
            ${{ matrix.name }}-ccache-${{ github.base_ref }}
            ${{ matrix.name }}-ccache-

      - name: Configure tests
        env:
          CXX: ${{ matrix.cxx }}
          CC: ${{ matrix.cc }}
        run: |
          mkdir app-build
          cd app-build
          cmake ../app -DCMAKE_BUILD_TYPE=${{ matrix.build_type }} -DCMAKE_CXX_FLAGS="${{ matrix.cxx_flags }} ${CWARN}"

      - name: Build tests
        env:
          CCACHE_BASEDIR: ${{ github.workspace }}
          CCACHE_DIR: ${{ github.workspace }}/.ccache
          CCACHE_COMPRESS: true
          CCACHE_COMPRESSLEVEL: 6
          CCACHE_MAXSIZE: 5G
        run: |
          ccache -p || true
          cd app-build
          if [[ "${{ matrix.build }}" =~ ^(documentation)$ ]]; then
            make -k -j4 doc 2>doxygen_warnings.txt
          else
            make -k -j4
          fi

      - name: Run tests
        if: matrix.build != 'coverage' # Already ran by the make call
        run: |
          cd app-build
          if [[ "${{ matrix.build }}" =~ ^(documentation)$ ]]; then
            cat doxygen_warnings.txt && test ! -s doxygen_warnings.txt
          else
            ctest . -j4 --output-on-failure
          fi

      - name: Submit coverage build
        if: matrix.build == 'coverage'
        shell: bash
        run: bash <(curl -s https://codecov.io/bash) -f ./app-build/app_coverage -R ./app || echo 'Codecov failed to upload'

      - name: Package documentation
        if: matrix.build == 'documentation'
        continue-on-error: true
        run: tar -zcf documentation.tar.gz app-build

      - name: Upload documentation
        if: matrix.build == 'documentation'
        continue-on-error: true
        uses: actions/upload-artifact@v2
        with:
          name: documentation
          path: documentation.tar.gz
